#+STARTUP overview
* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-starup-message t)
  (setq package-enable-at-startup nil)
  (setq inhibit-startup-message t) ;; 关闭启动画面
  (setq make-backup-files nil) ;; 关闭自动备份
  (setq auto-save-default nil) ;; 关闭自动保存
  (set-face-attribute 'default nil :height 160) ;; 设置默认字体
  (global-linum-mode 1) ;; 打开行数
  (tool-bar-mode -1) ;; 关闭工具栏
  (global-linum-mode 1) ;; 高亮显示当前行
  (setq initial-frame-alist (quote ((fullscreen . maximized)))) ;; 默认全屏
  (add-hook 'emacs-lisp-mode-hook 'show-paren-mode)
#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

* ace-window
  jump window in multiple window
  #+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
       '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
  #+END_SRC
* Swiper
  #+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t)

(use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
  #+END_SRC

* Avy
#+BEGIN_SRC emacs-lisp
;; avy has many splash features
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* Company
  auto-complete package
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (progn
    (add-hook 'after-init-hook 'global-company-mode)))
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :config (load-theme 'zenburn t))
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

* Python
要安装virtualenv
#+BEGIN_SRC 
sudo pip install virtualenv
#+END_SRC
安装完成jedi之后还需要 *M-x jedi:install-server*
  #+BEGIN_SRC emacs-lisp
    (use-package jedi
      :ensure t
      :init
      (add-hook 'python-mode-hook 'jedi:setup)
      (add-hook 'python-mode-hook 'jedi:ac-setup))

    (use-package elpy
      :ensure t
      :config
      (elpy-enable))
  #+END_SRC
* Yasnippets
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC
* Unto Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  ;; org-mode 相关
  (require 'org)
  (setq org-src-fontify-natively t) ;; 设置orgmode 代码高亮
#+END_SRC
* Pop-win
#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :config
    (popwin-mode 1))
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode t)
    ;; 在emacs-lisp中，单引号不成双出现
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil))
#+END_SRC
* Javascript Env
** js2mode
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :config
        (progn
          (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))))
    #+END_SRC
* exec-path-from-shell
  #+BEGIN_SRC emacs-lisp
    (use-package exec-path-from-shell
      :ensure t
      :config
      (progn
        (when (memq window-system '(mac ns))
          (exec-path-from-shell-initialize))))
  #+END_SRC
* other
#+BEGIN_SRC emacs-lisp
  ;; 当光标在两个括号中间时，显示当前所在括号
  (define-advice show-paren-function (:around (fn) fix-show-paren-function)
    "highlight enclosing parens."
    (cond ((looking-at-p "\\s(") (funcall fn))
          (t (save-excursion
              (ignore-errors (backward-up-list))
              (funcall fn)))))
#+END_SRC
